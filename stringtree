#include <iostream>
#include <stdio.h>
#include <string.h>
using namespace std;

class TreeStringNode {
   public:
  char **keys;
  int t;
  TreeStringNode **C;
  int n;
  bool leaf;

  TreeStringNode(int temp, bool bool_leaf);

  void insertNonFull(char *k);
  void splitChild(int i, TreeStringNode *y);
  void traverse();

  TreeStringNode *search(char *k);

  friend class BStringTree;
};

class BStringTree {
  TreeStringNode *root;
  int t;

   public:
  BStringTree(int temp) {
    root = NULL;
    t = temp;
  }

  void traverse() {
    if (root != NULL)
      root->traverse();
  }

  TreeStringNode *search(char *k) {
    return (root == NULL) ? NULL : root->search(k);
  }

  void insert(char *k);
};

TreeStringNode::TreeStringNode(int t1, bool leaf1) {
  t = t1;
  leaf = leaf1;

  keys = new char *[2 * t - 1];
  C = new TreeStringNode *[2 * t];

  n = 0;
}

void TreeStringNode::traverse() {
  int i;
  for (i = 0; i < n; i++) {
    if (leaf == false)
      C[i]->traverse();
    cout << " " << keys[i];
  }

  if (leaf == false)
    C[i]->traverse();
}

TreeStringNode *TreeStringNode::search(char *k) {
  int i = 0;
  while (i < n && (strcmp(k,keys[i]))>0)
    i++;

  if (strcmp(keys[i],k)==0)
    return this;

  if (leaf == true)
    return NULL;

  return C[i]->search(k);
}

void BStringTree::insert(char *k) {
  if (root == NULL) {
    root = new TreeStringNode(t, true);
    root->keys[0] = k;
    root->n = 1;
  } else {
    if (root->n == 2 * t - 1) {
      TreeStringNode *s = new TreeStringNode(t, false);

      s->C[0] = root;

      s->splitChild(0, root);

      int i = 0;
      if (strcmp(s->keys[0],k)<0)
        i++;
      s->C[i]->insertNonFull(k);

      root = s;
    } else
      root->insertNonFull(k);
  }
}

void TreeStringNode::insertNonFull(char *k) {
  int i = n - 1;

  if (leaf == true) {
    while (i >= 0 && (strcmp(keys[i],k)>0)) {
      keys[i + 1] = keys[i];
      i--;
    }

    keys[i + 1] = k;
    n = n + 1;
  } else {
    while (i >= 0 && (strcmp(keys[i],k)>0))
      i--;

    if (C[i + 1]->n == 2 * t - 1) {
      splitChild(i + 1, C[i + 1]);

      if (strcmp(keys[i+1],k)<0)
        i++;
    }
    C[i + 1]->insertNonFull(k);
  }
}

void TreeStringNode::splitChild(int i, TreeStringNode *y) {
  TreeStringNode *z = new TreeStringNode(y->t, y->leaf);
  z->n = t - 1;

  for (int j = 0; j < t - 1; j++)
    z->keys[j] = y->keys[j + t];

  if (y->leaf == false) {
    for (int j = 0; j < t; j++)
      z->C[j] = y->C[j + t];
  }

  y->n = t - 1;
  for (int j = n; j >= i + 1; j--)
    C[j + 1] = C[j];

  C[i + 1] = z;

  for (int j = n - 1; j >= i; j--)
    keys[j + 1] = keys[j];

  keys[i] = y->keys[t - 1];
  n = n + 1;
}

int main() {
  BStringTree t(3);
  t.insert("abc");
  t.insert("def");
  t.insert("ghi");
  t.insert("v");
  t.insert("a");
  t.insert("z");
  t.insert("zidzvhoox");

  cout << "The B-tree is: ";
  t.traverse();

  char *k = "abc";
  (t.search(k) != NULL) ? cout << endl
                 << k << " is found"
              : cout << endl
                 << k << " is not Found";

  k = "def";
  (t.search(k) != NULL) ? cout << endl
                 << k << " is found"
              : cout << endl
                 << k << " is not Found\n";
}
