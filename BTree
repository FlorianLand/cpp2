#include<string>
#include<string.h>
#include<iostream>
#include<stdio.h>
#include<fstream>

using namespace std;
struct eingabe
{
	char *zk;
	int zahl;
	struct eingabe *next;
	struct eingabe *prev;
	struct eingabe *nextnode[5];
	struct eingabe *prevnode[5];
	struct eingabe *curnode[5];
	
};

// Searching a key on a B-tree in C++

#include <iostream>
using namespace std;

class TreeNode {
public:
  int *keys;
  int t;
  TreeNode **C;
  int n;
  bool leaf;
  struct eingabe *listen;

  TreeNode(int temp, bool bool_leaf);

  void insertNonFull(int k);
  void splitChild(int i, TreeNode *y);
  void traverse();

  TreeNode *search(int k);

  friend class BTree;
};

class BTree {
  TreeNode *root;
  int t;

   public:
  BTree(int temp) {
    root = NULL;
    t = temp;
  }

  void traverse() {
    if (root != NULL)
      root->traverse();
  }

  TreeNode *search(int k) {
    return (root == NULL) ? NULL : root->search(k);
  }

  void insert(int k);
};

TreeNode::TreeNode(int t1, bool leaf1) {
  t = t1;
  leaf = leaf1;

  keys = new int[2 * t - 1];
  C = new TreeNode *[2 * t];

  n = 0;
}

void TreeNode::traverse() {
  int i;
  for (i = 0; i < n; i++) {
    if (leaf == false)
      C[i]->traverse();
    cout << " " << keys[i];
  }

  if (leaf == false)
    C[i]->traverse();
}

TreeNode *TreeNode::search(int k) {
  int i = 0;
  while (i < n && k > keys[i])
    i++;

  if (keys[i] == k)
    return this;

  if (leaf == true)
    return NULL;

  return C[i]->search(k);
}

void BTree::insert(int k) {
  if (root == NULL) {
    root = new TreeNode(t, true);
    root->keys[0] = k;
    root->n = 1;
  } else {
    if (root->n == 2 * t - 1) {
      TreeNode *s = new TreeNode(t, false);

      s->C[0] = root;

      s->splitChild(0, root);

      int i = 0;
      if (s->keys[0] < k)
        i++;
      s->C[i]->insertNonFull(k);

      root = s;
    } else
      root->insertNonFull(k);
  }
}

void TreeNode::insertNonFull(int k) {
  int i = n - 1;

  if (leaf == true) {
    while (i >= 0 && keys[i] > k) {
      keys[i + 1] = keys[i];
      i--;
    }

    keys[i + 1] = k;
    n = n + 1;
  } else {
    while (i >= 0 && keys[i] > k)
      i--;

    if (C[i + 1]->n == 2 * t - 1) {
      splitChild(i + 1, C[i + 1]);

      if (keys[i + 1] < k)
        i++;
    }
    C[i + 1]->insertNonFull(k);
  }
}

void TreeNode::splitChild(int i, TreeNode *y) {
  TreeNode *z = new TreeNode(y->t, y->leaf);
  z->n = t - 1;

  for (int j = 0; j < t - 1; j++)
    z->keys[j] = y->keys[j + t];

  if (y->leaf == false) {
    for (int j = 0; j < t; j++)
      z->C[j] = y->C[j + t];
  }

  y->n = t - 1;
  for (int j = n; j >= i + 1; j--)
    C[j + 1] = C[j];

  C[i + 1] = z;

  for (int j = n - 1; j >= i; j--)
    keys[j + 1] = keys[j];

  keys[i] = y->keys[t - 1];
  n = n + 1;
}


class TreeStringNode {
   public:
  char **keys;
  int t;
  TreeStringNode **C;
  int n;
  bool leaf;
  struct eingabe *listen;

  TreeStringNode(int temp, bool bool_leaf);

  void insertNonFull(char *k);
  void splitChild(int i, TreeStringNode *y);
  void traverse();

  TreeStringNode *search(char *k);

  friend class BStringTree;
};

class BStringTree {
  TreeStringNode *root;
  int t;

   public:
  BStringTree(int temp) {
    root = NULL;
    t = temp;
  }

  void traverse() {
    if (root != NULL)
      root->traverse();
  }

  TreeStringNode *search(char *k) {
    return (root == NULL) ? NULL : root->search(k);
  }

  void insert(char *k);
};

TreeStringNode::TreeStringNode(int t1, bool leaf1) {
  t = t1;
  leaf = leaf1;

  keys = new char *[2 * t - 1];
  C = new TreeStringNode *[2 * t];

  n = 0;
}

void TreeStringNode::traverse() {
  int i;
  for (i = 0; i < n; i++) {
    if (leaf == false)
      C[i]->traverse();
    cout << " " << keys[i];
  }

  if (leaf == false)
    C[i]->traverse();
}

TreeStringNode *TreeStringNode::search(char *k) {
  int i = 0;
  while (i < n-1 && strcmp(k,keys[i])>0)
    i++;

  if (strcmp(keys[i],k)==0)
    return this;

  if (leaf == true)
    return NULL;

  return C[i]->search(k);
}

void BStringTree::insert(char *k) {
  if (root == NULL) {
    root = new TreeStringNode(t, true);
    root->keys[0] = k;
    root->n = 1;
  } else {
    if (root->n == 2 * t - 1) {
      TreeStringNode *s = new TreeStringNode(t, false);

      s->C[0] = root;

      s->splitChild(0, root);

      int i = 0;
      if (strcmp(s->keys[0],k)<0)
        i++;
      s->C[i]->insertNonFull(k);

      root = s;
    } else
      root->insertNonFull(k);
  }
}

void TreeStringNode::insertNonFull(char *k) {
  int i = n - 1;

  if (leaf == true) {
    while (i >= 0 && (strcmp(keys[i],k)>0)) {
      keys[i + 1] = keys[i];
      i--;
    }

    keys[i + 1] = k;
    n = n + 1;
  } else {
    while (i >= 0 && (strcmp(keys[i],k)>0))
      i--;

    if (C[i + 1]->n == 2 * t - 1) {
      splitChild(i + 1, C[i + 1]);

      if (strcmp(keys[i+1],k)<0)
        i++;
    }
    C[i + 1]->insertNonFull(k);
  }
}

void TreeStringNode::splitChild(int i, TreeStringNode *y) {
  TreeStringNode *z = new TreeStringNode(y->t, y->leaf);
  z->n = t - 1;

  for (int j = 0; j < t - 1; j++)
    z->keys[j] = y->keys[j + t];

  if (y->leaf == false) {
    for (int j = 0; j < t; j++)
      z->C[j] = y->C[j + t];
  }

  y->n = t - 1;
  for (int j = n; j >= i + 1; j--)
    C[j + 1] = C[j];

  C[i + 1] = z;

  for (int j = n - 1; j >= i; j--)
    keys[j + 1] = keys[j];

  keys[i] = y->keys[t - 1];
  n = n + 1;
}




struct eingabe *getLastElement(struct eingabe *liste)

{

	if(liste==NULL) return NULL;

	while(liste->next!=NULL)liste=liste->next;

	return liste;

}



struct eingabe *getFirstElement(struct eingabe *liste)

{

	if(liste==NULL) return NULL;

	while(liste->prev!=NULL) liste=liste->prev;

	return liste;

}



void output(eingabe *list)

{

	if (list==NULL) return;

	while(list->prev!=NULL) list = list->prev;

	while(list!=NULL)

	{

		cout << "E: " << list->zk << ":" << list->zahl << endl;

		list = list->next;

	}

}



struct eingabe *createElement(char *zk, int zahl)

{

	struct eingabe *newElement = (struct eingabe *)malloc(sizeof(struct eingabe));

	newElement->zk = (char *)malloc((sizeof(char)*strlen(zk))+1);

	strcpy(newElement->zk,zk);

	newElement->zahl = zahl;

	newElement->next = NULL;
	
	newElement->prev = NULL;

	return newElement;

}

struct eingabe *insertElement(struct eingabe *liste, char *zk, int zahl)

{

	struct eingabe *newElement = createElement(zk, zahl);	

	newElement->next=getFirstElement(liste);
	
	if(newElement->next!=NULL) newElement->next->prev = newElement;	

	return newElement;
}

struct eingabe *addElement(struct eingabe *liste, char *zk, int zahl)

{

	if (liste==NULL) return insertElement(liste, zk, zahl);

	else 

	{

		struct eingabe *newElement = createElement(zk, zahl);	

		newElement->prev=getLastElement(liste);

		if(newElement->prev!=NULL) newElement->prev->next = newElement;

		return newElement;

	}

}

struct eingabe *readList(string filePath, struct eingabe *liste)
{
	/* Übergabe eines Dateipfads als String & Auslesen des Dateinhalts */	
	string line;
	char* tmp = NULL;
	char* string_tmp = NULL;
	char* number_strtmp = NULL;
	int number_tmp = 0;

	/* this->elements = NULL; */
	/* Liste Schritt für Schritt durchgehen und delete */
	ifstream listenstream(filePath);
	if(listenstream.is_open())
	{
		while(getline(listenstream,line))
		{
		//	cout<<line<<endl;
			/* Listenformat: string:string:int */
			tmp = new char[line.length()+1];
			strcpy(tmp,line.c_str());
			number_strtmp = strtok(tmp, ";");
			string_tmp = strtok(NULL, "\n");

			number_tmp = atoi(number_strtmp);

			if((string_tmp != NULL) && (number_tmp != NULL)) 
			{
			liste =	addElement(liste,string_tmp,number_tmp);
			}
		}
	}
	return liste;
	//output(liste); 
}
template <typename T>
bool getResultDirect (T x,T y) {
//	cout<<"compare: "<<x<<" : "<<y<<endl;
	if(x==y)
	{
		return true;
	}else{
		return false;
	}
}

template <typename T>
bool getStringDirect (T x,T y) {
//	cout<<"compare: "<<x<<" : "<<y<<endl;
	if(strcmp(x,y)==0)
	{
		return true;
	}else{
		return false;
	}
}




BStringTree createStringTree(struct eingabe *liste)
{
	liste=getFirstElement(liste);
	BStringTree t(3);
	while(liste!=NULL)
	{
		t.search(liste->zk);
		if(t.search(liste->zk)==NULL)
		{
			cout<<"Element: "<<liste->zk<<" nicht enthalten"<<endl;
			t.insert(liste->zk);
		}
		else
		{
			cout<<"Element: "<<liste->zk<<" bereits enthalten"<<endl;
		}
		liste=liste->next;
	}	
	liste=getFirstElement(liste);
	struct eingabe temp;
	while(liste!=NULL)
	{
		TreeStringNode *node=t.search(liste->zk);
		if(node->listen==NULL)
		{
			node->listen==liste;
			liste=liste->next;
			node->listen->next=NULL;
			node->listen->prev=NULL;
		}
		else
		{
			node->listen->next=liste;
			liste=liste->next;
			node->listen->next->prev=node->listen;
			node->listen->next->next=NULL;
			node->listen=node->listen->next;
		}
	}
	return t;
//	t.traverse();
}

BTree createIntTree(struct eingabe *liste)
{
	BTree t(3);
	liste=getFirstElement(liste);
	while(liste!=NULL)
	{
		if(t.search(liste->zahl)==NULL)
		{
			t.insert(liste->zahl);
		}
			liste=liste->next;
	}
	t.traverse();
	liste=getFirstElement(liste);
	struct eingabe temp;
	while(liste!=NULL)
	{
		TreeNode *node=t.search(liste->zahl);
		if(node->listen==NULL)
		{
			node->listen==liste;
			liste=liste->next;
			node->listen->next=NULL;
			node->listen->prev=NULL;
		}
		else
		{
			node->listen->next=liste;
			liste=liste->next;
			node->listen->next->prev=node->listen;
			node->listen->next->next=NULL;
			node->listen=node->listen->next;
		}
	}
	t.traverse();
	//search(42);
	return t;
}

void search(struct eingabe *liste, string searcher)
{	
	cout<<"Bitte geben Sie 1 ein wenn Sie eine Zahl und 2 wenn Sie eine Zeichenkette suchen möchten"<<endl;
	int var = getchar();
	getchar();
	int var2 = 0;
	bool found=false;
	int c=0;
	int searcher_int=0;
	char* tmp=NULL;
	char* str_tmp=NULL;
	tmp = new char[searcher.length()+1];
	str_tmp=strtok(tmp,"\n");
	strcpy(tmp,searcher.c_str());
	searcher_int = atoi(tmp);
	if(var==49)
	{				//Zahl
		cout<<"Zahl: "<<var<<endl;
		cout<<"Bitte geben Sie 1 ein wenn Sie direkt suchen möchten und 2 wenn Sie eine im Baum suchen möchten"<<endl;
		var2 = getchar();
		if(var2==49)
		{
			//direkt
			int start = clock();
				
			while((liste!=NULL)&&(found==false))
			{
				c++;
				found=getResultDirect(searcher_int,liste->zahl);
				liste=liste->next;			
			}
				int zeit=clock()-start;
				cout<<"Benötigte Zeit: "<<zeit<<" Millisekunden"<<endl;
			
			if(found==false)
			{
				cout<<"Nicht in der Liste enthalten"<<endl;
				cout<<"Vergleiche: "<<c<<endl;	
			}
			else
			{
				cout<<"Element gefunden"<<endl;
				cout<<c<<" Vergeleiche waren notwendig";
			}	
		}
		else
		{
			if(var2==50)
			//Baum
			{		
					BTree baum=createIntTree(liste);
					int start = clock();
					if(baum.search(searcher_int)==NULL)
					{
						cout<<"Element nicht gefunden";
					}
					else
					{
						cout<<"Element wurde gefunden";	
					}
						int zeit=clock()-start;
				cout<<"Benötigte Zeit: "<<zeit<<" Millisekunden"<<endl;
			}
			else
			{
			//Fehler
				cout<<var2<<endl;
				cout<<"Fehlerhafte Eingabe"<<endl;
			}
		}
	}
	else
	{
		if(var==50)
		{			//Zeichenkette
			cout<<"Zeichenkette"<<endl;
			cout<<"Zahl"<<endl;
			cout<<"Bitte geben Sie 1 ein wenn Sie direkt suchen möchten und 2 wenn Sie eine im Baum suchen möchten"<<endl;
			var2 = getchar();
			if(var2==49)	//Direkt
			{
				int start = clock();
				
				while((liste!=NULL)&&(found==false))
				{
					c++;
					found=getStringDirect(tmp,liste->zk);
					liste=liste->next;			
				}
				int zeit=clock()-start;
				cout<<"Benötigte Zeit: "<<zeit<<" Millisekunden"<<endl;
				if(found==false)
				{
					cout<<"Nicht in der Liste enthalten"<<endl;
					cout<<"Vergleiche: "<<c<<endl;	
				}
				else
				{
					cout<<"Element gefunden"<<endl;
					cout<<c<<" Vergeleiche waren notwendig";
				}	
			}
			else
			{
				if(var2==50)	//Baum
				{
					BStringTree baum=createStringTree(liste);
					int start = clock();
					if(baum.search(tmp)==NULL)
					{
						cout<<"Element nicht gefunden";
					}
					else
					{
						cout<<"Element wurde gefunden";	
					}
						int zeit=clock()-start;
				cout<<"Benötigte Zeit: "<<zeit<<" Millisekunden"<<endl;
				}
				else
				{
					cout<<"Fehlerhafte Eingabe"<<endl;
				}
			}
		}
		else
		{
			cout<<var<<endl;
			cout<<"Fehlerhafte Eingabe"<<endl;
		}
	}
}
int main()
{
	struct eingabe *liste = NULL;
	string input = "";
	cout<<"Bitte geben Sie den Dateinamen ein"<<endl;
	getline(cin,input);
	liste=readList(input,liste);
	cout<<"Bitte geben Sie das zu suchende Element ein"<<endl;
	string element;
	getline(cin,element);
	cout<<element<<endl;
	liste=getFirstElement(liste);
	search(liste,element);
	return 0;
}
